<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
  
  <select id="getAllUser" resultType="UserVo">
    select *
      from users  <!-- ibatis에서는 #userId#    mybatis는 #{userId} -->
  </select>
  
  
	<!-- 특정 사용자 조회(userId) query,dao(test), service(test) 
		  [메서드 명: selectUser(String userId) ] -->
		  
 <select id="selectUser" parameterType="String" resultType="UserVo">
 	select     userid
              , userNm
              , alias
              , addr1
              , addr2
              , zipcode
              , pass
              , reg_dt
              , filename
              , realfilename
 		   
 	  from USERS
 	 WHERE USERID = #{userId}
 </select>
 
   <!-- 사용자 page조회 -->
   <select id="selectUserPagingList" resultType="userVO" parameterType="pageVo" >
      select *
         from
            (select a.*, rownum rn
               from
                  (select users.*
                     from users
                  order by userId) a) a
      where rn between (#{page}-1)*#{pageSize}+1 and #{page}*#{pageSize}
   </select>
   
   <!-- 전체 사용자 수 조회 -->
   <select id ="getUserCnt" resultType="Integer">
    select count(*)
     from users
   </select>
 
 
 <!--사용자 입력  -->
 	<insert id="insertUser" parameterType ="userVo">
 	insert into users
                (
                userid
              , userNm
              , alias
              , addr1
              , addr2
              , zipcode
              , pass
              , reg_dt
              , filename
              , realFilename
                )
     values     (
                #{userId}
              , #{userNm}
              , #{alias}
              , #{addr1}
              , #{addr2}
              , #{zipcode}
              , #{pass}
              , sysdate
              , #{filename}
              , #{realFilename}
                )
 	</insert>

<!-- 사용자 삭제 --> 
 <delete id="deleteUser" parameterType="String">
 delete from users
 where userid = #{value}
  </delete>
  
  
  
  <!--사용자 수정  -->
  <update id="updateUser" parameterType="userVo">
  update users
    set userNM  =  #{userNm}
      , alias   =  #{alias}
      , pass    =  #{pass}
      , addr1   =  #{addr1}
      , addr2   =  #{addr2}
      , zipcode =  #{zipcode}
       <if test="filename != null">
 <!--  <if test="#{filename} != null"> -->
       , filename = #{filename} 
       , realFilename = #{realFilename}
      </if>
    where USERID = #{userId}
  
  </update>
  <update id="updatePassforEncrypt" parameterType="userVo">
  update users
    set   pass    =  #{pass}
    where USERID = #{userId}
  
  </update>
  
  
 
</mapper>